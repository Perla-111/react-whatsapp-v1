[{"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\index.js":"1","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reportWebVitals.js":"2","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\App.js":"3","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\homepage\\homepage.js":"4","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\startpage\\startpage.js":"5","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\chatpage\\chatpage.js":"6","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\verificationpages\\phonedetails.js":"7","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\verificationpages\\otppage.js":"8","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\callpage\\index.js":"9","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\footer\\footer.js":"10","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\startpage\\startpage2.js":"11","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\chatpage\\header\\chat-header.js":"12","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\chatpage\\body\\chatbody.js":"13","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\homepage\\body\\index.js":"14","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\homepage\\header\\index.js":"15","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\data\\sample\\testData.js":"16","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\hoverIcons\\hoverIcons.js":"17","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\data\\sample\\chatsData.js":"18","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\firebase.js":"19","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\settings\\settings.js":"20","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\settingspages\\profile\\profile.js":"21","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\actions\\stateActions.js":"22","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\store\\configureStore.js":"23","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\actions\\actionTypes.js":"24","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\data\\api\\UserApi.js":"25","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reducers\\index.js":"26","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reducers\\stateReducer.js":"27","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reducers\\initialState.js":"28"},{"size":800,"mtime":1647683017826,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1647683017890,"results":"31","hashOfConfig":"30"},{"size":1198,"mtime":1647683221683,"results":"32","hashOfConfig":"30"},{"size":507,"mtime":1647683018762,"results":"33","hashOfConfig":"30"},{"size":1184,"mtime":1647683019588,"results":"34","hashOfConfig":"30"},{"size":433,"mtime":1647683018370,"results":"35","hashOfConfig":"30"},{"size":4337,"mtime":1647683019994,"results":"36","hashOfConfig":"30"},{"size":3658,"mtime":1647683019938,"results":"37","hashOfConfig":"30"},{"size":2133,"mtime":1647683018242,"results":"38","hashOfConfig":"30"},{"size":290,"mtime":1647683018674,"results":"39","hashOfConfig":"30"},{"size":1734,"mtime":1647683019858,"results":"40","hashOfConfig":"30"},{"size":1542,"mtime":1647683018586,"results":"41","hashOfConfig":"30"},{"size":16624,"mtime":1647683018482,"results":"42","hashOfConfig":"30"},{"size":13495,"mtime":1647683018850,"results":"43","hashOfConfig":"30"},{"size":1812,"mtime":1647683018930,"results":"44","hashOfConfig":"30"},{"size":688,"mtime":1647355082438,"results":"45","hashOfConfig":"30"},{"size":776,"mtime":1647683019053,"results":"46","hashOfConfig":"30"},{"size":550,"mtime":1647620590798,"results":"47","hashOfConfig":"30"},{"size":575,"mtime":1647683017754,"results":"48","hashOfConfig":"30"},{"size":5281,"mtime":1647683019149,"results":"49","hashOfConfig":"30"},{"size":5301,"mtime":1647683019301,"results":"50","hashOfConfig":"30"},{"size":4354,"mtime":1647683018042,"results":"51","hashOfConfig":"30"},{"size":258,"mtime":1647683021264,"results":"52","hashOfConfig":"30"},{"size":638,"mtime":1647683017962,"results":"53","hashOfConfig":"30"},{"size":11872,"mtime":1647683020187,"results":"54","hashOfConfig":"30"},{"size":271,"mtime":1647683021067,"results":"55","hashOfConfig":"30"},{"size":2792,"mtime":1647683021147,"results":"56","hashOfConfig":"30"},{"size":636,"mtime":1647683021107,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15k6rh4",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\index.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reportWebVitals.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\App.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\homepage\\homepage.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\startpage\\startpage.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\chatpage\\chatpage.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\verificationpages\\phonedetails.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\verificationpages\\otppage.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\callpage\\index.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\footer\\footer.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\startpage\\startpage2.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\chatpage\\header\\chat-header.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\chatpage\\body\\chatbody.js",["144"],[],"import './chatbody.css';\r\n\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\n\r\nimport { useEffect, useState, useReducer, useRef } from 'react';\r\nimport cx from 'classnames';\r\n//import testData from \"../../../data/sample/testData\";\r\n\r\nimport fireDb from '../../../firebase';\r\n\r\n//import axios from 'axios';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport * as stateActions from '../../../actions/stateActions';\r\n\r\nvar sent = true;\r\nvar received = true;\r\nvar rCount = 0, sCount = 0;\r\n\r\n\r\nconst callReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'COPY_FROM_PROPS_MYSTATE':\r\n            //console.log(action.by);\r\n            return action.by;\r\n\r\n        case 'ADD_TO_REDATA':\r\n            //console.log(action.by);\r\n            return [...state, action.by];\r\n\r\n        default:\r\n            throw new Error();\r\n    }\r\n};\r\n\r\nconst ChatBody = (props) => {\r\n\r\n    const [text, setText] = useState('');\r\n    //const [data, setData] = useState([]);\r\n    const [redata, dispatch] = useReducer(callReducer, []);\r\n    const [allData, setAllData] = useState({});\r\n\r\n    const [toHitDb, setToHitDb] = useState('true');\r\n\r\n\r\n    useEffect(() => {\r\n        setAllData(props.mystate.states.loggedInUserdata)\r\n    }, [props.mystate.states.loggedInUserdata]);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: 'COPY_FROM_PROPS_MYSTATE', by: props.mystate.states.loggedInUserdata.chats1[0].messages });\r\n    }, [props.mystate.states.loggedInUserdata.chats1]);\r\n\r\n    useEffect(() => {\r\n        var settimer;\r\n        //this is in state to stop trigger post db response.data\r\n        //let count =0;//should not be in state in this demo example\r\n        let timer1 = setTimeout(() => {\r\n            console.log('started timeout'); //after 2 secs of comp load\r\n            settimer = setInterval(() => {                                  // start hitting db\r\n                console.log('started interval');\r\n                if (toHitDb === 'true') {   //data was changed by other chat so\r\n                    console.log('checking trigger db');\r\n\r\n                    props.actions.loadLoggedInUserNotifications(props.mystate.states.enteredPhoneNumber).then(resd => {\r\n                    fireDb.child(\"triggeredUsers\").orderByChild(\"isTriggered\").equalTo('true')\r\n                    .once(\"value\")//.then(snapshot=>snapshot)\r\n                    .then(snapshot => {\r\n\r\n                        var res = {\r\n                            data : []\r\n                        };\r\n                        console.log(snapshot.val());\r\n                        if(snapshot.val()!==null){\r\n                          for(let i=0;i<snapshot.val().length;i++){\r\n                            if(snapshot.val()[i]!==undefined){\r\n                              //if(snapshot.val()[i].phoneNumber.toString()===oppositeUserNumber.toString()){\r\n                                res.data[0] =  snapshot.val()[i];\r\n                                console.log(res.data);\r\n                              //}\r\n                              //else console.log('id not matched')\r\n                            }\r\n                            else console.log('not found')\r\n                          }\r\n                        }\r\n\r\n                        if (res.data.length > 0) {\r\n                            setToHitDb('false');\r\n                            console.log(res.data[0].phoneNumber.toString());\r\n                            console.log(props.mystate.states.loggedInUserdata.phoneNumber.toString());\r\n                            if(res.data[0].id.toString()===props.mystate.states.loggedInUserdata.id.toString()){\r\n                            props.actions.loadLoggedInUserData(res.data[0].phoneNumber);\r\n                            //let path = `http://localhost:4000/triggeredUsers/${res.data[0].id}`;\r\n                            /*\r\n                               let res1 = {data : snapshot.val()}\r\n                                const toPushInFireDb = {\r\n                                id: res1.data[0].id,\r\n                                phoneNumber: res1.data[0].phoneNumber,\r\n                                name: res1.data[0].name,\r\n                                isTriggered: 'false'\r\n                            }\r\n                        */\r\n                            const toPushInFireDb = {\r\n                                id: res.data[0].id,\r\n                                phoneNumber: res.data[0].phoneNumber,\r\n                                name: res.data[0].name,\r\n                                lastMessage : res.data[0].lastMessage,\r\n                                notificationsCount : 0,\r\n                                isTriggered: 'false'\r\n                            }\r\n                            fireDb.child(\"triggeredUsers\").orderByChild(\"phoneNumber\").equalTo(res.data[0].phoneNumber).once(\"child_added\", function(snapshot) {\r\n                             \r\n                                snapshot.ref.update(toPushInFireDb);\r\n                                console.log(snapshot.val());\r\n                                setToHitDb('true');\r\n                              }).then((ress='ok')=>\r\n                              props.actions.loadLoggedInUserNotifications(res.data[0].phoneNumber));\r\n\r\n                              /*\r\n                            axios.put(path,\r\n                                {\r\n                                    id: res.data[0].id,\r\n                                    phoneNumber: res.data[0].phoneNumber,\r\n                                    name: res.data[0].name,\r\n                                    isTriggered: 'false'\r\n                                }\r\n                            ).then(res=>{\r\n                                console.log(res.data);\r\n                                setToHitDb('true');\r\n                            })\r\n                            */\r\n                        }\r\n                            else \r\n                            setToHitDb('true');\r\n                        }\r\n                        else\r\n                            console.log('none');\r\n                    })})\r\n/* for json-server with axios\r\n                    axios.get(\"http://localhost:4000/triggeredUsers\", {\r\n                        params: {\r\n                            isTriggered: 'true'\r\n                        }\r\n                    })\r\n                        .then(res => {\r\n                            if (res.data.length > 0) {\r\n                                setToHitDb('false');\r\n                                console.log(res.data[0].phoneNumber.toString());\r\n                                console.log(props.mystate.states.loggedInUserdata.phoneNumber.toString());\r\n                                if(res.data[0].id.toString()===props.mystate.states.loggedInUserdata.id.toString()){\r\n                                props.actions.loadLoggedInUserData(res.data[0].phoneNumber);\r\n                                let path = `http://localhost:4000/triggeredUsers/${res.data[0].id}`;\r\n                                /*\r\n                                   let res1 = {data : snapshot.val()}\r\n                                    const toPushInFireDb = {\r\n                                    id: res1.data[0].id,\r\n                                    phoneNumber: res1.data[0].phoneNumber,\r\n                                    name: res1.data[0].name,\r\n                                    isTriggered: 'false'\r\n                                }\r\n                            //\r\n                                const toPushInFireDb = {\r\n                                    id: res.data[0].id,\r\n                                    phoneNumber: res.data[0].phoneNumber,\r\n                                    name: res.data[0].name,\r\n                                    isTriggered: 'false'\r\n                                }\r\n                                fireDb.child(\"triggeredUsers\").orderByChild(\"phoneNumber\").equalTo(res.data[0].phoneNumber).once(\"child_added\", function(snapshot) {\r\n                                 \r\n                                    snapshot.ref.update(toPushInFireDb);\r\n                                    console.log(snapshot.val());\r\n                                  });\r\n\r\n                                  \r\n                                axios.put(path,\r\n                                    {\r\n                                        id: res.data[0].id,\r\n                                        phoneNumber: res.data[0].phoneNumber,\r\n                                        name: res.data[0].name,\r\n                                        isTriggered: 'false'\r\n                                    }\r\n                                ).then(res=>{\r\n                                    console.log(res.data);\r\n                                    setToHitDb('true');\r\n                                })}\r\n                                else \r\n                                setToHitDb('true');\r\n                            }\r\n                            else\r\n                                console.log('none');\r\n                        })\r\n                        */\r\n                }\r\n                else {\r\n                    console.log('none');\r\n                }\r\n            }, 3000);\r\n        }, 2000);\r\n\r\n        // this will clear Timeout\r\n        // when component unmount like in willComponentUnmount\r\n        // and show will not change to true\r\n        return () => {\r\n            console.log('cleared timeout');\r\n            clearTimeout(timer1);\r\n            clearInterval(settimer);\r\n            //clearTimeout(timer2);\r\n        };\r\n    },\r\n        // useEffect will run only one time with empty []\r\n        // if you pass a value to array,\r\n        // like this - [data]\r\n        // than clearTimeout will run every time\r\n        // this value changes (useEffect re-run)\r\n        []//dont put anything inside this array for this useEffect\r\n    );\r\n\r\n\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [redata]);\r\n\r\n\r\n\r\n\r\n    function keyPressed(e) {\r\n        if (e.key === 'Enter')\r\n            sendMessage();\r\n    }\r\n    function sendMessage() {\r\n        setText('');\r\n        if (text.length >= 1) {\r\n\r\n            dispatch({\r\n                type: 'ADD_TO_REDATA', by: {\r\n\r\n                    msgType: \"sent\",\r\n                    timeStamp: \"5 : 48 pm\",\r\n                    msg: text,\r\n                    isDelivered: \"yes\",\r\n                    isReceived: \"yes\",\r\n                    isRead: \"yes\",\r\n                    id: \"\"\r\n                }\r\n            });\r\n\r\n        }\r\n        if (text.length >= 1) {\r\n        let oppositeUserNumber = props.mystate.states.loggedInUserdata.chats1[0].phoneNumber;\r\n        let oppositeUserName = props.mystate.states.loggedInUserdata.chats1[0].name;\r\n        let ids = props.mystate.states.loggedInUserdata.id;\r\n        var idsOpposite = props.mystate.states.loggedInUserdata.chats1[0].receiverId;\r\n        let OppUserNotifications;\r\n        for(let i=0;i<props.mystate.states.triggeredUsers.length;i++){\r\n            if(oppositeUserNumber.toString()===props.mystate.states.triggeredUsers[i].phoneNumber.toString()){\r\n                OppUserNotifications = props.mystate.states.triggeredUsers[i].notificationsCount;\r\n                console.log(props.mystate.states.triggeredUsers[i].notificationsCount);\r\n                console.log(oppositeUserNumber);\r\n            }\r\n            }\r\n        let oppositeUserLastMessage = text;\r\n        props.actions.updateUserChat({\r\n\r\n            msgType: \"sent\",\r\n            timeStamp: \"5 : 48 pm\",\r\n            msg: text,\r\n            isDelivered: \"yes\",\r\n            isReceived: \"yes\",\r\n            isRead: \"yes\",\r\n            id: \"\"\r\n        }, allData, ids)\r\n\r\n        setTimeout(() => {\r\n            props.actions.updateOppositeUserChat({\r\n                msgType: \"received\",\r\n                timeStamp: \"5 : 48 pm\",\r\n                msg: text,\r\n                isDelivered: \"yes\",\r\n                isReceived: \"yes\",\r\n                isRead: \"yes\",\r\n                id: \"\"\r\n            }, oppositeUserNumber, idsOpposite).then(res =>{\r\n                props.actions.updateOppositeUserChatTrigger(idsOpposite,oppositeUserNumber,oppositeUserName,OppUserNotifications,oppositeUserLastMessage);\r\n            })\r\n            \r\n        }, 2000);\r\n    }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"chat-body\">\r\n\r\n                {redata && redata.map((text, index) => {\r\n                    if (text.msgType === 'sent') {\r\n                        if (sCount === 0) {\r\n                            sCount++;\r\n                            rCount = 0;\r\n                            received = true;\r\n                        }\r\n                        else {\r\n                            sent = false;\r\n                        }\r\n                        return <div key={index} className={cx({\r\n                            \"chat-message-sent\": sent,\r\n                            \"chat-message-sent-repeat\": !sent\r\n                        })}>\r\n                            {text.msg}\r\n                            <span className=\"chat-timestamp-s\">\r\n                                {new Date().getHours().toString()}:\r\n                                {new Date().getMinutes().toString()}&nbsp;pm\r\n                            </span>\r\n                            {sent && <span className=\"bubble-sent\"></span>}\r\n                        </div>\r\n                    }\r\n\r\n\r\n\r\n                    else {\r\n                        if (rCount === 0) {\r\n                            rCount++;\r\n                            sCount = 0;\r\n                            sent = true;\r\n                        }\r\n                        else {\r\n                            received = false;\r\n                        }\r\n                        return <p key={index} className={cx({\r\n                            \"chat-message\": received,\r\n                            \"chat-message-repeat\": !received\r\n                        })}>\r\n                            {text.msg}\r\n                            {received && <span className=\"bubble-received\"></span>}\r\n                            <span className=\"chat-timestamp-r\">\r\n                                {new Date().getHours().toString()}:\r\n                                {new Date().getMinutes().toString()}&nbsp;pm\r\n                            </span>\r\n                        </p>\r\n                    }\r\n                })}\r\n\r\n                <div ref={messagesEndRef} />\r\n\r\n            </div>\r\n            <div className=\"input-actions\" >\r\n                <div className=\"left\">\r\n                    <div className=\"msg\">\r\n                        <IconButton >\r\n                            <InsertEmoticonIcon />\r\n                        </IconButton>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Type a message\"\r\n                            value={text}\r\n                            onChange={(e) => { setText(e.target.value) }}\r\n                            onKeyDown={keyPressed} />\r\n                    </div>\r\n                    <div>\r\n                        <IconButton>\r\n                            <AttachFileIcon />\r\n                        </IconButton>\r\n                        <IconButton >\r\n                            <CameraAltIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <div className=\"right\">\r\n                    <IconButton\r\n                        style={{ outlineWidth: '0' }}\r\n                        onClick={sendMessage}>\r\n                        <MicIcon style={{ color: \"white\" }}\r\n                        />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n    return {\r\n        mystate: state\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(stateActions, dispatch)/*,\r\n    actions1: bindActionCreators(checkActions,dispatch)*/\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ChatBody));","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\homepage\\body\\index.js",["145","146"],[],"import { withRouter } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nimport dp1 from '../../../data/dp/dp1.jpg';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\n\r\nimport HoverIcons from '../../hoverIcons/hoverIcons';\r\nimport { useEffect, useState } from 'react';\r\n\r\n//import chatsData from '../../../data/sample/chatsData';\r\n\r\nimport fireDb from '../../../firebase';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as stateActions from '../../../actions/stateActions';\r\n\r\nconst ChatTiles = (props) => {\r\n    const [chatData, setChatData] = useState();\r\n    const [oppositeUserChatData, setOppositeUserChatData] = useState();\r\n    const [lastmessage,setlastmessage] = useState('');\r\n\r\n    const [toHitDb, setToHitDb] = useState('true');\r\n\r\n\r\n    useEffect(()=>{\r\n        \r\n        if(props.mystate.states.triggeredUsers&&props.mystate.states.loggedInUserdata.phoneNumber){\r\n            setlastmessage(props.mystate.states.loggedInUserdata.chats1[0].messages[props.mystate.states.loggedInUserdata.chats1[0].messages.length-1].msg);\r\n            for(let i=0;i<props.mystate.states.triggeredUsers.length;i++){\r\n            if(props.mystate.states.loggedInUserdata.phoneNumber.toString()===props.mystate.states.triggeredUsers[i].phoneNumber.toString()){\r\n                //console.log(props.mystate.states.triggeredUsers[i]);\r\n                setChatData([props.mystate.states.triggeredUsers[i]]);\r\n            }\r\n            else\r\n            {setOppositeUserChatData(props.mystate.states.triggeredUsers[i]);\r\n            console.log(props.mystate.states.triggeredUsers[i])}\r\n            }\r\n        }\r\n        //console.log(props.mystate.states.triggeredUsers);\r\n        //console.log(chatData);\r\n    },[props.mystate.states.triggeredUsers,props.mystate.states.loggedInUserdata.phoneNumber])\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        var settimer;\r\n        //this is in state to stop trigger post db response.data\r\n        //let count =0;//should not be in state in this demo example\r\n        let timer1 = setTimeout(() => {\r\n            console.log('started timeout'); //after 2 secs of comp load\r\n            settimer = setInterval(() => {                                  // start hitting db\r\n                console.log('started interval');\r\n                if (toHitDb === 'true') {   //data was changed by other chat so\r\n                    console.log('checking trigger db');\r\n\r\n                    props.actions.loadLoggedInUserNotifications(props.mystate.states.enteredPhoneNumber).then(resd => {\r\n                    fireDb.child(\"triggeredUsers\").orderByChild(\"isTriggered\").equalTo('true')\r\n                    .once(\"value\")//.then(snapshot=>snapshot)\r\n                    .then(snapshot => {\r\n\r\n                        var res = {\r\n                            data : []\r\n                        };\r\n                        console.log(snapshot.val());\r\n                        if(snapshot.val()!==null){\r\n                          for(let i=0;i<snapshot.val().length;i++){\r\n                            if(snapshot.val()[i]!==undefined){\r\n                              //if(snapshot.val()[i].phoneNumber.toString()===oppositeUserNumber.toString()){\r\n                                res.data[0] =  snapshot.val()[i];\r\n                                console.log(res.data);\r\n                              //}\r\n                              //else console.log('id not matched')\r\n                            }\r\n                            else console.log('not found')\r\n                          }\r\n                        }\r\n\r\n                        if (res.data.length > 0) {\r\n                            setToHitDb('false');\r\n                            console.log(res.data[0].phoneNumber.toString());\r\n                            console.log(props.mystate.states.enteredPhoneNumber.toString());//replaced this 2 places -> props.mystate.states.loggedInUserdata.phoneNumber\r\n                            if(res.data[0].phoneNumber.toString()===props.mystate.states.enteredPhoneNumber.toString()){\r\n                            props.actions.loadLoggedInUserData(res.data[0].phoneNumber);\r\n                            //let path = `http://localhost:4000/triggeredUsers/${res.data[0].id}`;\r\n                            /*\r\n                               let res1 = {data : snapshot.val()}\r\n                                const toPushInFireDb = {\r\n                                id: res1.data[0].id,\r\n                                phoneNumber: res1.data[0].phoneNumber,\r\n                                name: res1.data[0].name,\r\n                                isTriggered: 'false'\r\n                            }\r\n                        */\r\n                            const toPushInFireDb = {\r\n                                id: res.data[0].id,\r\n                                phoneNumber: res.data[0].phoneNumber,\r\n                                name: res.data[0].name,\r\n                                lastMessage : res.data[0].lastMessage,\r\n                                notificationsCount : res.data[0].notificationsCount,\r\n                                isTriggered: 'false'\r\n                            }\r\n                            fireDb.child(\"triggeredUsers\").orderByChild(\"phoneNumber\").equalTo(res.data[0].phoneNumber).once(\"child_added\", function(snapshot) {\r\n                             \r\n                                snapshot.ref.update(toPushInFireDb);\r\n                                console.log(snapshot.val());\r\n                                setToHitDb('true');\r\n                              }).then((ress='ok')=>\r\n                              props.actions.loadLoggedInUserNotifications(res.data[0].phoneNumber));\r\n\r\n                              /*\r\n                            axios.put(path,\r\n                                {\r\n                                    id: res.data[0].id,\r\n                                    phoneNumber: res.data[0].phoneNumber,\r\n                                    name: res.data[0].name,\r\n                                    isTriggered: 'false'\r\n                                }\r\n                            ).then(res=>{\r\n                                console.log(res.data);\r\n                                setToHitDb('true');\r\n                            })\r\n                            */\r\n                        }\r\n                            else \r\n                            setToHitDb('true');\r\n                        }\r\n                        else\r\n                            console.log('none');\r\n                    })})\r\n/* for json-server with axios\r\n                    axios.get(\"http://localhost:4000/triggeredUsers\", {\r\n                        params: {\r\n                            isTriggered: 'true'\r\n                        }\r\n                    })\r\n                        .then(res => {\r\n                            if (res.data.length > 0) {\r\n                                setToHitDb('false');\r\n                                console.log(res.data[0].phoneNumber.toString());\r\n                                console.log(props.mystate.states.loggedInUserdata.phoneNumber.toString());\r\n                                if(res.data[0].id.toString()===props.mystate.states.loggedInUserdata.id.toString()){\r\n                                props.actions.loadLoggedInUserData(res.data[0].phoneNumber);\r\n                                let path = `http://localhost:4000/triggeredUsers/${res.data[0].id}`;\r\n                                /*\r\n                                   let res1 = {data : snapshot.val()}\r\n                                    const toPushInFireDb = {\r\n                                    id: res1.data[0].id,\r\n                                    phoneNumber: res1.data[0].phoneNumber,\r\n                                    name: res1.data[0].name,\r\n                                    isTriggered: 'false'\r\n                                }\r\n                            //\r\n                                const toPushInFireDb = {\r\n                                    id: res.data[0].id,\r\n                                    phoneNumber: res.data[0].phoneNumber,\r\n                                    name: res.data[0].name,\r\n                                    isTriggered: 'false'\r\n                                }\r\n                                fireDb.child(\"triggeredUsers\").orderByChild(\"phoneNumber\").equalTo(res.data[0].phoneNumber).once(\"child_added\", function(snapshot) {\r\n                                 \r\n                                    snapshot.ref.update(toPushInFireDb);\r\n                                    console.log(snapshot.val());\r\n                                  });\r\n\r\n                                  \r\n                                axios.put(path,\r\n                                    {\r\n                                        id: res.data[0].id,\r\n                                        phoneNumber: res.data[0].phoneNumber,\r\n                                        name: res.data[0].name,\r\n                                        isTriggered: 'false'\r\n                                    }\r\n                                ).then(res=>{\r\n                                    console.log(res.data);\r\n                                    setToHitDb('true');\r\n                                })}\r\n                                else \r\n                                setToHitDb('true');\r\n                            }\r\n                            else\r\n                                console.log('none');\r\n                        })\r\n                        */\r\n                }\r\n                else {\r\n                    console.log('none');\r\n                }\r\n            }, 3000);\r\n        }, 1500);\r\n\r\n        // this will clear Timeout\r\n        // when component unmount like in willComponentUnmount\r\n        // and show will not change to true\r\n        return () => {\r\n            console.log('cleared timeout');\r\n            clearTimeout(timer1);\r\n            clearInterval(settimer);\r\n            //clearTimeout(timer2);\r\n        };\r\n    },\r\n        // useEffect will run only one time with empty []\r\n        // if you pass a value to array,\r\n        // like this - [data]\r\n        // than clearTimeout will run every time\r\n        // this value changes (useEffect re-run)\r\n        []//dont put anything inside this array for this useEffect\r\n    );\r\n\r\n    return (\r\n        <div className=\"body1\">\r\n        <div className=\"chat-tiles\" >\r\n            {chatData && \r\n            chatData.map((chat,index)=>\r\n            <div key={index} className=\"tile\">\r\n                <div></div>\r\n            <img className=\"dp\" src={dp1} alt=\"nnnn\" height=\"49px\"\r\n            width=\"49px\"></img>\r\n            <div className=\"content\" onClick={()=>{props.history.push(\r\n                {pathname : '/inChat'}\r\n            )}}>\r\n            <div className=\"topp\">\r\n                <div className=\"topp1\">{oppositeUserChatData.name}</div>\r\n                <div className=\"topp2\">{'yesterday'}</div>\r\n            </div>\r\n            <div className=\"bott\">\r\n                <label className='textWrapp'>{/*chat.group*/false?`${'chat.chatMemberName'}: `:''}{lastmessage}</label>\r\n                <label > {/*chat.chatMuted*/true?<VolumeOffIcon style={{ color: 'grey' }}/>:''}\r\n                    &nbsp; \r\n                {chat.notificationsCount>0?<span className=\"badge badge-success rounded-circle\">{chat.notificationsCount}</span>:''}\r\n                    </label>\r\n            </div>\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n            )\r\n            }\r\n\r\n\r\n\r\n        {/*\r\n        <div className=\"tile\">\r\n            <img className=\"dp\" src={dp1} alt=\"nnnn\" height=\"49px\"\r\n            width=\"49px\"></img>\r\n            <div className=\"content\" onClick={()=>{props.history.push('/inChat');}}>\r\n            <div className=\"topp\">\r\n                <div className=\"topp1\">We are Inevitables👶🏻</div>\r\n                <div className=\"topp2\">yesterday</div>\r\n            </div>\r\n            <div className=\"bott\">\r\n                <label >Sai Teja: # Sticker</label>\r\n                <label > <VolumeOffIcon style={{ color: 'grey' }}/>\r\n                    &nbsp; \r\n                <span className=\"badge badge-success rounded-circle\">4</span>\r\n                    </label>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        */}\r\n\r\n        {/*<div className=\"tile\">\r\n            <img className=\"dp\" src={dp1} alt=\"nnnn\" height=\"49px\"\r\n            width=\"49px\"></img>\r\n            <div className=\"content\">\r\n            <div className=\"topp\">\r\n                <div className=\"topp1\">We are Inevitables👶🏻</div>\r\n                <div className=\"topp2\">yesterday</div>\r\n            </div>\r\n            <div className=\"bott\">\r\n                <label >Sai Teja: # Sticker</label>\r\n                <label > &nbsp; \r\n                <span className=\"badge badge-success rounded-circle\">4</span>\r\n                    </label>\r\n            </div>\r\n            </div>\r\n        </div>*/}\r\n\r\n        </div>\r\n        <HoverIcons />\r\n\r\n</div>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state,ownProps){\r\n    return {\r\n      mystate : state\r\n    };\r\n  }\r\n   \r\n  function mapDispatchToProps(dispatch){\r\n    return {\r\n      actions : bindActionCreators(stateActions,dispatch)/*,\r\n      //actions1: bindActionCreators(checkActions,dispatch)*/\r\n    };\r\n  }\r\n  \r\n  export default connect(mapStateToProps,mapDispatchToProps)(withRouter(ChatTiles));","C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\homepage\\header\\index.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\data\\sample\\testData.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\hoverIcons\\hoverIcons.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\data\\sample\\chatsData.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\firebase.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\settings\\settings.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\components\\settingspages\\profile\\profile.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\actions\\stateActions.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\store\\configureStore.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\actions\\actionTypes.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\data\\api\\UserApi.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reducers\\index.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reducers\\stateReducer.js",[],[],"C:\\Users\\KALYANKUMAR\\Downloads\\whatsapp_v1\\whatsapp_v1\\src\\reducers\\initialState.js",[],[],{"ruleId":"147","severity":1,"message":"148","line":223,"column":9,"nodeType":"149","endLine":223,"endColumn":11,"suggestions":"150"},{"ruleId":"147","severity":1,"message":"151","line":44,"column":7,"nodeType":"149","endLine":44,"endColumn":94,"suggestions":"152"},{"ruleId":"147","severity":1,"message":"153","line":211,"column":9,"nodeType":"149","endLine":211,"endColumn":11,"suggestions":"154"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.actions', 'props.mystate.states.enteredPhoneNumber', 'props.mystate.states.loggedInUserdata.id', 'props.mystate.states.loggedInUserdata.phoneNumber', and 'toHitDb'. Either include them or remove the dependency array.","ArrayExpression",["155"],"React Hook useEffect has a missing dependency: 'props.mystate.states.loggedInUserdata.chats1'. Either include it or remove the dependency array. If 'setlastmessage' needs the current value of 'props.mystate.states.loggedInUserdata.chats1', you can also switch to useReducer instead of useState and read 'props.mystate.states.loggedInUserdata.chats1' in the reducer.",["156"],"React Hook useEffect has missing dependencies: 'props.actions', 'props.mystate.states.enteredPhoneNumber', and 'toHitDb'. Either include them or remove the dependency array.",["157"],{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [props.actions, props.mystate.states.enteredPhoneNumber, props.mystate.states.loggedInUserdata.id, props.mystate.states.loggedInUserdata.phoneNumber, toHitDb]",{"range":"164","text":"165"},"Update the dependencies array to be: [props.mystate.states.triggeredUsers, props.mystate.states.loggedInUserdata.phoneNumber, props.mystate.states.loggedInUserdata.chats1]",{"range":"166","text":"167"},"Update the dependencies array to be: [props.actions, props.mystate.states.enteredPhoneNumber, toHitDb]",{"range":"168","text":"169"},[10165,10167],"[props.actions, props.mystate.states.enteredPhoneNumber, props.mystate.states.loggedInUserdata.id, props.mystate.states.loggedInUserdata.phoneNumber, toHitDb]",[1766,1853],"[props.mystate.states.triggeredUsers, props.mystate.states.loggedInUserdata.phoneNumber, props.mystate.states.loggedInUserdata.chats1]",[10329,10331],"[props.actions, props.mystate.states.enteredPhoneNumber, toHitDb]"]